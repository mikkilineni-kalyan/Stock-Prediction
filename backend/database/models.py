from sqlalchemy import Column, Integer, String, Float, DateTime, JSON, ForeignKey, Table
from sqlalchemy.orm import relationship
from sqlalchemy.ext.declarative import declarative_base
from datetime import datetime

Base = declarative_base()

# Association tables for many-to-many relationships
model_features = Table(
    'model_features',
    Base.metadata,
    Column('model_id', Integer, ForeignKey('models.id')),
    Column('feature_id', Integer, ForeignKey('features.id'))
)

class StockData(Base):
    """Stock price and volume data"""
    __tablename__ = 'stock_data'
    
    id = Column(Integer, primary_key=True)
    symbol = Column(String, index=True)
    timestamp = Column(DateTime, index=True)
    open_price = Column(Float)
    high_price = Column(Float)
    low_price = Column(Float)
    close_price = Column(Float)
    volume = Column(Float)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Feature(Base):
    """Feature definitions and metadata"""
    __tablename__ = 'features'
    
    id = Column(Integer, primary_key=True)
    name = Column(String, unique=True)
    description = Column(String)
    category = Column(String)  # technical, fundamental, sentiment, etc.
    parameters = Column(JSON)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    models = relationship('Model', secondary=model_features, back_populates='features')
    values = relationship('FeatureValue', back_populates='feature')

class FeatureValue(Base):
    """Computed feature values"""
    __tablename__ = 'feature_values'
    
    id = Column(Integer, primary_key=True)
    feature_id = Column(Integer, ForeignKey('features.id'))
    symbol = Column(String, index=True)
    timestamp = Column(DateTime, index=True)
    value = Column(Float)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    feature = relationship('Feature', back_populates='values')

class Model(Base):
    """Model metadata and configuration"""
    __tablename__ = 'models'
    
    id = Column(Integer, primary_key=True)
    name = Column(String)
    version = Column(String)
    type = Column(String)  # ensemble, lstm, etc.
    parameters = Column(JSON)
    metrics = Column(JSON)
    status = Column(String)  # active, archived, failed
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    features = relationship('Feature', secondary=model_features, back_populates='models')
    predictions = relationship('Prediction', back_populates='model')
    performance_metrics = relationship('ModelPerformance', back_populates='model')

class Prediction(Base):
    """Model predictions"""
    __tablename__ = 'predictions'
    
    id = Column(Integer, primary_key=True)
    model_id = Column(Integer, ForeignKey('models.id'))
    symbol = Column(String, index=True)
    timestamp = Column(DateTime, index=True)
    prediction = Column(Float)
    confidence = Column(Float)
    features_used = Column(JSON)
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    model = relationship('Model', back_populates='predictions')

class ModelPerformance(Base):
    """Model performance metrics"""
    __tablename__ = 'model_performance'
    
    id = Column(Integer, primary_key=True)
    model_id = Column(Integer, ForeignKey('models.id'))
    timestamp = Column(DateTime, index=True)
    metric_name = Column(String)
    metric_value = Column(Float)
    symbol = Column(String)
    window = Column(String)  # daily, weekly, monthly
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    model = relationship('Model', back_populates='performance_metrics')

class TradingSignal(Base):
    """Trading signals generated by models"""
    __tablename__ = 'trading_signals'
    
    id = Column(Integer, primary_key=True)
    symbol = Column(String, index=True)
    timestamp = Column(DateTime, index=True)
    signal_type = Column(String)  # buy, sell, hold
    strength = Column(Float)
    confidence = Column(Float)
    factors = Column(JSON)  # Contributing factors to the signal
    created_at = Column(DateTime, default=datetime.utcnow)

class MarketData(Base):
    """Market-wide indicators and data"""
    __tablename__ = 'market_data'
    
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, index=True)
    indicator_name = Column(String, index=True)
    value = Column(Float)
    category = Column(String)  # economic, sentiment, volatility, etc.
    source = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow)

class DataQualityMetric(Base):
    """Data quality metrics"""
    __tablename__ = 'data_quality_metrics'
    
    id = Column(Integer, primary_key=True)
    timestamp = Column(DateTime, index=True)
    category = Column(String)  # stock_data, features, predictions
    metric_name = Column(String)
    metric_value = Column(Float)
    details = Column(JSON)
    created_at = Column(DateTime, default=datetime.utcnow)
